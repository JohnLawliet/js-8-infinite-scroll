


class InfiniteScroll{
    totalImages = 0
    ready = false
    imagesLoaded = 0
    photosArray = []
    
    count = 10;
    apiKey = '';
    apiURL = ''
    apiKey = 'YnTE9tK93kreWqIPCiQjGxHdovky9AxMrzVTBKga6Xg';
    apiURL = `https://api.unsplash.com/photos/random/?client_id=${this.apiKey}&count=${this.count}`


    //CHeck if all images were loaded
    imageLoading = () => {
        this.imagesLoaded++
        if (this.imagesLoaded === this.totalImages){
            loader.hidden = true
            console.log("Oh yeaa Im ready, take mah load!")
            this.ready = true
        }
    }


    //setAttributes of items
    setAttributes = (item, attributes) => {
        for (var key in attributes){
            item.setAttribute(key, attributes[key])
        }
    }

    // Create elements for links & photos
    displayPhotos = () => {
        this.totalImages = this.photosArray.length
        console.log("totalImages : ",this.totalImages)
        this.photosArray.forEach(photo => {
            //Create <a> to link to unsplash
            const item = document.createElement("a")
            this.setAttributes(item, {
                href: photo.links.html,
                target: "_blank"
            })
            
            //Create img for photo
            const img = document.createElement("img")
            this.setAttributes(img, {
                src: photo.urls.regular,
                alt: photo.alt_description,
                title: photo.alt_description
            })
            //check when each is finished loading
            img.addEventListener('load',this.imageLoading)
            //put img inside a and then both inside image container
            item.appendChild(img);
            imageContainer.appendChild(item)
        })
    }

    //Get photos from unsplash api
    getPhotos = async () => {
        console.log("api : ",this.apiURL)
        try{
            const response = await fetch(this.apiURL)
            this.photosArray = await response.json()
            this.displayPhotos()
        }
        catch(error){
            console.log(error)
        }
    }

    //Check to see if scrolling near bottom of page, unload on user
    func = () => {
        const {ready} = this.ready
        
        window.addEventListener('scroll', () => {
            console.log("ready : ", ready)
            if (window.innerHeight + window.scrollY >= document.body.offsetHeight-1000 && ready){
                
                ready = false
                this.imagesLoaded = 0
                this.getPhotos()
            }
        })
    }    

}


const myScroll = new InfiniteScroll()
myScroll.func()
myScroll.getPhotos()